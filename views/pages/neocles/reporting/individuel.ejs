
<!DOCTYPE html>

<html lang="en">
<head>
  <meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <meta charset="utf-8">
  <meta name="generator" content="Bootply" />
  <link rel="stylesheet" href="/styles/importer.css">
  <link rel="stylesheet" href="/bootflat/css/bootflat.min.css">
  <link rel="stylesheet" href="/font-awesome/css/font-awesome.min.css">
  <link rel="stylesheet" href="/css/local.css">
  <link rel="stylesheet" href="/css/Style_v3.css">

  <link rel="stylesheet" href="/jquery-ui/jquery-ui.css">

  <link rel="stylesheet" href="/css/bootstrap-duration-picker.css">

  <!-- bootbox code -->
  <script src="js/bootbox.min.js"></script>

  <!-- check select -->
  <link rel="stylesheet" href="/css/bootstrap-multiselect.css">

  <style type="text/css">
    .notation_almerys{
    }
    .colorTable{
      background-color:red;
    }
    input[type=radio] {
      display: block;
      margin: 0 auto;
    }
    label {
      display: inline-block;
    }
                                                          
  </style>
  <title>Notation Neocles</title>
</head>

<body onload="loadAll();">

    <!-- HEADER -->
<%

if(req.session.droit==1){

%>
<% include ../../../includes/entete.ejs %>
<% }else{

%>
<% include ../../../includes/enteteOperateur.ejs %>

<% }%>
<!-- /HEADER -->


<div id="page-wrapper">

<div class="panel-heading">
    <div class="row">
        <div class="panel panel-primary">

            <%if(req.session.isFormateur == true) {%>
            <div class="form-group col-md-2" style="margin-left:25px">
            <label for="tc_select">Intervenant</label>
            <select class="form-control" id="tc_select" name="tc_select"  required='required'>
                <option value="">-</option>
            </select>
            </div>
            <%}

            else{%>
                <input type="hidden" name = "tc_select" id="tc_select" value="<%- req.session.user %>">
            <%}%>

            <div class="form-group col-md-2" style="margin-left:25px">
                <label for="type_masque">Type</label>
                <select class="form-control" id="type_masque" name="type_masque"  required='required'>
                    <option value="">-</option>
                </select>
                </div>

            <div class="form-group  col-xs-2 col-md-2 col-lg-2"  style="margin-left:25px">
                <label for="date_enregistrement">Date</label>
                <input type="text" class="form-control" tabindex="-1" id='date_enregistrement' name='date_enregistrement' >
            </div>

            <div class="form-group  col-xs-2 col-md-2 col-lg-2"  style="margin-left:25px">
                <input type="button" class="form-control btn-primary" tabindex="-1" id='submit' name='submit' value="OK" onclick="go();" >
            </div>

        </div>
    </div>
</div>

<div id="load1" class="col-md-4" style="display:none">
    <i class="fa fa-spinner fa-pulse fa-3x fa-fw"></i>
    <span class="sr-only">Loading...</span>
</div>


<div id="listByOp">
    <div class="x_panel">
        <div class="x_title">
        <h2> REPORTING </h2>
        <ul class="nav navbar-right panel_toolbox">
            <li><a class="collapse-link"><i class="fa fa-chevron-up"></i></a>
            </li>

            <li><a class="close-link"><i class="fa fa-close"></i></a>
            </li>
        </ul>
        <div class="clearfix"></div>
        </div>

        <div class="x_content"></div>

    </div>

</div>

    <h4 class="h4" style="display:none"> Notes </h4>
    <div>
        <div id="div-tableau" >
        
        </div>
    </div>
    <br/>

    <h4 class="h4" style="display:none"> Moyenne note </h4>
    <div id="div-chartMoyenneNote" >
        <canvas id="chartMoyenneNote" width="70" height="30"></canvas>
    </div>
    
    <br/>
    <h4 class="h4" style="display:none"> Note Mensuelle </h4>
    <div id="div-chartNoteMensuelle" >
        <canvas id="chartNoteMensuelle" width="70" height="30"></canvas>
    </div>

    <br/>
    <h4 class="h4" style="display:none"> Conformit√© </h4>
    <div id="div-chartConformite" >
        <canvas id="chartConformite" width="70" height="30"></canvas>
    </div>

    <div id="chart" style="width: 500px; height: 350px;"></div>

</div>

</body>

<script src="/js/jquery-1.12.4.js"></script>
<!--<script src="/js/base.min.js"></script>-->
<!--<script src="/js/project.min.js"></script>-->
<script src="js/jquery.min.js"></script>
<script src="js/bootstrap.min.js"></script>
<script src="js/scripts.js"></script>

<script src="/js/vendors/echarts.min.js"></script>
<script src="/js/dependencies/sails.io.js"></script>
<script src="/js/jquery-ui.min.js"></script>
<script src="/js/custom.min.js"></script><!--script customise-->
<script src="/js/bootstrap-duration-picker-debug.js"></script>

<script src="/js/bootstrap-multiselect.js"></script>


<script src="/vendors/Chart.js/dist/Chart.js"></script> 

<script language="javascript">

	function loadAll(){
        <% if(req.session.isFormateur == true){ %>
            loadTC();
        <%}%>

		loadType();
    }
    
	$(function() {
		$("#date_enregistrement").datepicker({
            dateFormat: 'yy/mm/dd'
		}).datepicker("setDate", new Date());
  	});


    function loadTC(){
		$.ajax({
		type: "GET",
		url: "/neocles-user-list",

		success: function(msg){
			var html = "<option value=''></option>";
			var data = JSON.parse(msg);

			for (var i = 0 ; i<data.length ; i++){
			html += "<option value='"+data[i].matricule+"'>"+data[i].matricule+" - "+data[i].appelation+"</option>";
			}
			$("#tc_select").html(html);
		},
		error: function (error) {

		}
		});
    }
    
	function loadType(){
		$.ajax({
		type: "GET",
		url: "/neocles-type-list",

		success: function(msg){
			var html = "<option value=''></option>";
			var data = JSON.parse(msg);

			for (var i = 0 ; i<data.length ; i++){
				html += "<option value='"+data[i].id+"'>" + data[i].libelle + "</option>";
			}

			$("#type_masque").html(html);
		},
		error: function (error) {

		}
		});
    }
    
    function go(){
        initializeCanvas();
        showReportingSimple();
        showConformiteMensuelle();
    }

    function initializeCanvas(){
        $("#div-tableau").html("");
        resetCanvas("chartConformite", true);
        resetCanvas("chartMoyenneNote", true);
        resetCanvas("chartNoteMensuelle", true);
    }

    
	function showReportingSimple(){
		let id_type_masque = $("#type_masque").val();
		let id_pers = $("#tc_select").val();
		let date = $("#date_enregistrement").val();

		$.ajax({
			type: "GET",
			url: "/neocles-reporting-indiviuel-notes?id= " + id_pers + "&id_type_masque="+ id_type_masque + "&date=" + date ,
			beforeSend: function(xhr){
        		$( "#load1").show();
      		},
			success: function(msg){
				$( "#load1").hide();

                let json = JSON.parse(msg);

                if(json.length > 0){
                    showTableauNote(json);
                    getReportingMoyenneNote(json);
                    getReportingNoteMensuelle(json);
                }
			},
			error: function (error) {
				$( "#load1").hide();
			}
		});
    }
    
    function resetCanvas(id, hide){
        $('#' + id).remove(); // this is my <canvas> element
        $('#div-' + id).append('<canvas id='+ id +'><canvas>');
        canvas = document.querySelector('#' + id);
        ctx = canvas.getContext('2d');
        //ctx.canvas.width = $('#div-' + id).width(); // resize to parent width
        //ctx.canvas.height = $('#div-' + id).height(); // resize to parent height

        ctx.canvas.width = 50; 
        ctx.canvas.height = 15;

        var x = canvas.width/2;
        var y = canvas.height/2;
        ctx.font = '10pt Verdana';
        ctx.textAlign = 'center';
        ctx.fillText('This text is centered on the canvas', x, y);

        //show H4
        $( ".h4").show();
        $('#div-' + id).show();

        if(hide == true){
            $( ".h4").hide();
            $('#div-' + id).hide();
            console.log("hide "+ '#div-' + id);
        }
        
    };

    function convertDate(inputFormat) {
        function pad(s) { return (s < 10) ? '0' + s : s; }
        var d = new Date(inputFormat)
        return [pad(d.getDate()), pad(d.getMonth()+1), d.getFullYear()].join('/')
    }

    function showTableauNote(listeEcoutes){
        let colonnes = [];
        listeEcoutes[0].note.forEach(element => {
            colonnes.push(element.libelle);
        });

        let tableau = '<div id="tableFiltre">';
        tableau += '<table  id="datatable-buttons_h" class="table table-striped table-bordered">';
            tableau +='<thead>';
                tableau +='<thead>';
                    tableau += '<tr>';
                        tableau += '<th class="th text-center" style="width: 100px;">Date</th>';
                        tableau += '<th class="th text-center" >ID Client</th>';
                        tableau += '<th class="th text-center" >ID Ticket</th>';
                        tableau += '<th class="th text-center" >Situation inacceptable</th>';
                        tableau += '<th class="th text-center" >NOTE/45</th>';
                        tableau += '<th class="th text-center" >Seuil</th>';

                        colonnes.forEach(colonne => {
                            tableau += '<th class="th text-center">' + colonne + '</th>';
                        });

                    tableau += '</tr>';
            tableau +='</thead>';

            tableau += '<tbody>';
                    listeEcoutes.forEach(ecoute => {
                        tableau += '<tr height = "35">';
                        let situation = 'Non'
                        if(ecoute.situation_inacceptable == true) situation = 'Oui';
                        tableau += '<td>' + convertDate(ecoute.date_enregistrement) + '</td>';
                        tableau += '<td>' + ecoute.id_client + '</td>';
                        tableau += '<td>' + ecoute.id_ticket + '</td>';
                        tableau += '<td>' + situation + '</td>';
                        tableau += '<td>' + ecoute.note_total + '</td>';
                        tableau += '<td>' + ecoute.seuille + '</td>';

                        ecoute.note.forEach(note => {
                            tableau += '<td><span data-toggle="tooltip" class="" data-placement="right" title  = "'+ note.commentaire +'">' + note.note + '</span></td>';
                        });
                        tableau += '</tr>';
                    });
            tableau += '</tbody>';
        tableau += '</table>';
        tableau += '</div>';

        
        $("#div-tableau").html(tableau);

        $('[data-toggle="tooltip"]').tooltip();
    }

    /////////////////////////// moyenne note////////////////////////////////////////////////
    function getReportingMoyenneNote(listeEcoutes){

        let title = $( "#tc_select option:selected" ).text() + " " + $( "#type_masque option:selected" ).text();

        let datas = {};
        let dataNotes = [];
        let entete = [];

        let couleur = [
            'rgba(131, 174, 242, 0.7)',
            'rgba(250, 7, 7, 0.7)',
            'rgba(151, 31, 242, 0.7)',
            'rgba(207, 207, 14, 0.7)',
            'rgba(1, 31, 69, 0.7)',
            'rgba(4, 179, 15, 0.7)',
            'rgba(252, 113, 53, 0.7)',
            'rgba(74, 58, 2, 0.7)',
            'rgba(255, 36, 153, 0.7)',

            'rgba(59, 56, 50, 0.7)',
            'rgba(175, 227, 172, 0.7)',
            'rgba(245, 192, 164, 0.7)',
            'rgba(255, 13, 215, 0.7)',
            'rgba(21, 255, 13, 0.7)',
            'rgba(0, 36, 0, 0.7)'
        ];

        let couleurBorder = [
            'rgba(131, 174, 242, 1)',
            'rgba(250, 7, 7, 1)',
            'rgba(151, 31, 242, 1)',
            'rgba(207, 207, 14, 1)',
            'rgba(1, 31, 69, 1)',
            'rgba(4, 179, 15, 1)',
            'rgba(252, 113, 53, 1)',
            'rgba(74, 58, 2, 1)',
            'rgba(255, 36, 153)',

            'rgba(59, 56, 50, 1)',
            'rgba(175, 227, 172, 1)',
            'rgba(245, 192, 164, 1)',
            'rgba(255, 13, 215, 1)',
            'rgba(21, 255, 13, 1)',
            'rgba(0, 36, 0, 1)'
        ];

        listeEcoutes.forEach(ecoute => {
            ecoute.note.forEach(noteElement => {
                
                if(noteElement.note){
                    let dataAlreadyIn = datas[noteElement.libelle + ""];

                    if(dataAlreadyIn){
                        //existe
                        dataAlreadyIn.note += noteElement.note;
                        dataAlreadyIn.count ++;
                    }
                    else{
                        //existe pas
                        let dataToInsert = {};

                        entete.push(noteElement.libelle + "");

                        dataToInsert.note = noteElement.note;
                        dataToInsert.count = 1;

                        datas[noteElement.libelle + ""] = dataToInsert;
                    }
                }
                
           });
        });
        
        //destruction
        resetCanvas("chartMoyenneNote");

        //construction donn√©e chart
        var dataSets = [];

        /*
        let redColor = 13;
        let blueColor = 50;
        let greenColor = 255;
        */

        let index = 0;

        $.each(datas, function(key, data){
            let moyenne = Math.round(( data.note / data.count + Number.EPSILON) * 100) / 100;
            
            dataNotes.push(moyenne);


            if(index >= couleur.length) index = 0;
            let dataSet = {
                label : key, 
                data : [moyenne], 
                backgroundColor : [couleur[index]],
                borderColor : [couleurBorder[index]],
                borderWidth : 1
            };
            index++;

            /*
            redColor += 73;
            blueColor += 43;
            greenColor -= 98;

            if(redColor >= 255) redColor = 0;
            if(blueColor >= 255) blueColor = 0;
            if(greenColor = 0) greenColor = 255;
            

            let dataSet = {
                label : key, 
                data : [moyenne], 
                backgroundColor : ['rgba('+ redColor +', ' + greenColor + ', ' + blueColor + ', 0.7)'],
                borderColor : ['rgba('+ redColor +', ' + greenColor + ', '+ blueColor +', 1)'],
                borderWidth : 1,
                text : key
            };*/

            dataSets.push(dataSet);
        });

        //chart      
        var ctx = document.getElementById('chartMoyenneNote').getContext('2d');

        var myChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: [''],
                datasets: dataSets
            },
            options: {
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero: true,
                            max : 6
                        }
                    }]
                },
                
                responsive : true ,
                
                legend: {
                    position: 'bottom',
                    display: true,
    
                },

                "hover": {
                    "animationDuration": 0
                },

                "animation": {
                    "duration": 1,

                "onComplete": function() {
                    var chartInstance = this.chart,
                    ctx = chartInstance.ctx;
    
                    ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, Chart.defaults.global.defaultFontStyle, Chart.defaults.global.defaultFontFamily);
                    ctx.textAlign = 'center';
                    ctx.textBaseline = 'bottom';
    
                    this.data.datasets.forEach(function(dataset, i) {
                        var meta = chartInstance.controller.getDatasetMeta(i);
                        meta.data.forEach(function(bar, index) {
                            var data = dataset.data[index];
                            ctx.fillText(data, bar._model.x, bar._model.y - 5);
                        });
                    });
                }
                },
                title: {
                    display: false,
                    text: ''
                },
            },
             
        });
    }


    /////////////////////// NOTE MENSUELLE //////////////////////////////////////////////////

    function getReportingNoteMensuelle(listeEcoutes){
        let listNotes = [];
        let listSeuilles = [];
        let entetes = [];

        let row = 1;
        listeEcoutes.forEach(ecoute => {
            listNotes.push(ecoute.note_total);
            listSeuilles.push(ecoute.seuille);
            entetes.push(row++);
           // entetes.push(convertDate(ecoute.date_enregistrement));
        });

        //destruction
        resetCanvas("chartNoteMensuelle");
        var ctx = document.getElementById('chartNoteMensuelle').getContext('2d');

        let options = {
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: true,
                        max : 50
                    }
                }]
            },
            legend: {
                position: 'bottom',
                display: true,

            },
        };

        let data = {
            labels: entetes,
            datasets: [
                {
                    label: 'Notes',
                    //backgroundColor: 'rgb(255, 99, 132)',
                    borderColor: 'rgb(0, 99, 255)',
                    lineTension : 0,
                    data: listNotes,
                    fill : false
                },

                {
                    label: 'Seuil',
                    //backgroundColor: 'rgb(255, 99, 132)',
                    borderColor: 'rgb(255, 0, 0)',
                    pointRadius : 0,
                    lineTension : 0,
                    data : listSeuilles,
                    fill : false
                }
            ]  
        };

        var myLineChart = new Chart(ctx, {
            type: 'line',
            data: data,
            options: options
        });
                
    }

    /////////////////////// CONFORMITE MENSUELLE //////////////////////////////////////////////////
    function showConformiteMensuelle(){
        let id_type_masque = $("#type_masque").val();
		let id_pers = $("#tc_select").val();
		let date = $("#date_enregistrement").val();

		$.ajax({
			type: "GET",
			url: "/neocles-reporting-conformite?id= " + id_pers + "&id_type_masque="+ id_type_masque + "&date=" + date ,
			beforeSend: function(xhr){
        		$( "#load1").show();
      		},
			success: function(msg){
				$( "#load1").hide();

                let json = JSON.parse(msg);

                if(json.data && json.data.length > 0){
                    showChartConformiteMensuelle(json);
                }
			},
			error: function (error) {
				$( "#load1").hide();
			}
		});
    }
    
    function showChartConformiteMensuelle(json){

        let mois = [ "Janvier", "F√©vrier", "Mars", "Avril", "Mais", "Juin", "Juillet", "Ao√ªt", "Septembre", "Octobre", "Novembre", "D√©cembre"];
        let dataConformite = Array(12);
        let dataIso = Array(12);
        let listSeuilles = [98,98,98,98,98,98,98,98,98,98,98,98]

        //calcul nombre NC par mois
        json.data.forEach(function callback(ecoute) {
            let countError = dataConformite[ecoute.mois - 1];
            
            if(countError) {
                dataConformite[ecoute.mois - 1] = countError + 1;
            }
            else dataConformite[ecoute.mois - 1] = 1;
        });

        //verification mois null
        json.mois.forEach(function callback(idMois) {
            if(dataConformite[idMois.mois - 1] == null){
                dataConformite[idMois.mois - 1] = 0;
            }
        });

        //calcul ISO correspondant
        dataConformite.forEach(function callback(nbErreur, index) {
            if(nbErreur != null){
                let isoCorrespondant = json.iso.filter(isoElement => {
                    return isoElement.nombre_erreur == nbErreur;
                });

                isoCorrespondant = isoCorrespondant[0];
                let iso = 0;
                if(isoCorrespondant){
                    iso = isoCorrespondant.note_iso;
                }

                dataIso[index] = iso;
            }
        });

        //destruction
        resetCanvas("chartConformite");

        //affichage chart

        var ctx = document.getElementById('chartConformite').getContext('2d');
        
        let options = {
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: true,
                        max : 100,
                        min : 86,
                        callback: function(value, index, values) {
                            return value + '%' ;
                        }
                    }
                }]
            },
            legend: {
                position: 'bottom',
                display: true,

            },
        };

        let data = {
            labels: mois,
            datasets: [
                {
                    label: 'RESULTAT CONFORMITE ISO2859',
                    //backgroundColor: 'rgb(255, 99, 132)',
                    borderColor: 'rgb(0, 99, 255)',
                    borderWidth : 6,
                    lineTension : 0,
                    data: dataIso,
                    fill : false
                },

                {
                    label: 'Seuil conformit√©',
                    //backgroundColor: 'rgb(255, 99, 132)',
                    borderColor: 'rgb(255, 0, 0)',
                    borderWidth : 6,
                    pointRadius : 0,
                    lineTension : 0,
                    data : listSeuilles,
                    fill : false
                }
            ]  
        };

        var myLineChart = new Chart(ctx, {
            type: 'line',
            data: data,
            options: options
        });
    }


</script>

  